----------查看历史的命令--------------------
ctrl+p向上
ctrl+n向下
-----------光标移动----------------------
ctrl+b前移动
ctrl+f 后移
---------------删除光标前后的数据------------------
ctrl+u 删除光标前面所有的数据
ctrl+d 删除光标(包括光标)后面的数据
ctrl+h 删除光标前面的数据(不包括光标的数据)
---------------
/bin:所有的命令的可执行文件
/boot:开机启动的文件
/dev:Device，该目录下存放的是Linux外部设备，在Linux中访问设备的方式和访问文件的方式是相同的
/etc:这个目录用来存放所有的系统管理锁需要的配置胚子文件和子目录
/home:就是每个用户的(以用户名和账后为名的目录)
/lib存放Linux系统基本的共享库，类似与windows的DLL
/lost+found:这个目录是空的，当几条非正常关机的时候就存放一些丢失的数据文件的碎片
/media：Linux会自动识别一些设备，例如,U盘，光驱等，当识别后，Linux会把识别的设备挂载到这个目录下。
/mnt：该目录是为了让用户挂在别的文件系统的，可以将光驱挂载到/mnt/上，然后进入该目录就可以直接查看光驱的里面的内容了
/opt:这是给主机额外的安装的软件锁摆放的目录，如oracle
/proc:这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录获取系统信息，这个目录下面的内容不是在硬盘里面的而实在内存里面的，
/sbin:系统管理程序的目录


------------------------------vim的快捷键--------------------------------------
1. 拷贝当前行yy，拷贝当前行向下的5行 5yy,并粘贴(输入p)
2. 删除当前行dd,删除当前行向下的5行5dd
3. 在文件中查找某个档次[命令行下/关键字，回车查找，输入n就是查找下一个]
4. 设置文件行号，取消文件的行号[命令模式下:set nu和:set nonu]
5. 编辑/etc/profile文件，在一般哦是下，使用快捷键到该文档的最末行[G]和最首行[gg]
6. 在一个文件中输入了内容或者删除了内容，如果想撤销之前的操作，可以在一般模式输入u
7.编辑/etc/profile文件，在一般模式下，并将光标移动到，输入20，再输入shift+g
8.要快速跳到某一行，在命令模式下先输入n,然后输入:在输入行号即可，即:20就会跳到20行

-------------------------文件分页查看-----------------------------
cat /etc/profile |more 
more /etc/profile  ctrl+f向前翻一页，ctrl+b 向后翻一页
less /etc/profile ctrl+f向前翻一页，ctrl+b 向后翻一页

------------------------创建软链接----------------------------------
ln -s /root /home/chend/myroot 创建一个myroot文件指向root目录

------------------------执行历史执行过的指令-------------------------
!+历史指令的序号
!1032



-------------------------配合管道使用grep----------------------------
cat test.txt |grep -n -i 'test' 
-n 显示匹配到的字符串所在文件的行数
-i 忽略大小写
-------------------------压缩解压缩---------------------------------
zip -r 目录
upzip -d 目录

------------------------修改组--------------------------------------
chown root /home/a.txt

chrgp root /home/a.txt
 
usermod -g gid username 修改用户所属的组
------------------------------rwx的作用---------------------------------------
作用再文件上：
1. r:可以读取，查看文件
2. w:代表可以写，可以修改，但是不代表可以删除该文件，删除一个文件的前提是对该文件的所在目录有写的权限，才可以进行删除
3. x:代表可以执行

作用在目录上
1.r:可以读取，ls可以查看到内容
2.w:可以修改，对目录内创建+删除+重命名目录或者文件
3. x可以进入目录

--------------------------------chmod修改文件或者目录的权限----------------------
可以使用+、-、=变更权限
u:所有者
g:所有组
o:其他人
a:所有人
1. chmod u=rwx,g=rx,o=x 文件/目录(文件所属用户具有读写执行的权限，所属当前用户的组的其他用户具有读写的权限，其他用户具有执行的权限)
2. chmod o+w 对文件目录(其他人可以进行写操作)
3. chmod a-x 文件/目录(对所有用户都去除执行的权限)
-----------------------------修改文件所有者----------------------------------------
chown newowner
chown newowner:newgroup

如果是目录就可以这样使用:
chown -r /home/test

chgrp是同理的


---------------------------------crond任务调度的特殊符号的说明--------------------------
* 代表任何时间。比如第一个*就代表了一个小内的每分钟执行一次的意思
, 逗号代表不连续的时间。比如,"0 8,12,16 * * *"命令，代表了每条的8:00,12:00,16:00都执行一次
- 代表了连续的时间范围。比如"0 5 * * 1-6"，代表每周的周一到周六的5:00执行命令
*/n 代表每隔多久执行一次。比如"*/10 * * * *" 每隔10分钟执行一次 

*/1 * * * * *
第一个星代表分钟
第二个星代表小时
第三个星代表月
第四个星代表年
第五个星代表一个星期的星期几，可以使用-代表范围



crond相关的指令
crontab -r:终止任务调度
crontab -l:列出当前有哪些任务调度
service crond restart 重启任务调度

------------------------------------------atd定实任务----------------------------------------------------
输入at  执行时间
> 执行的命令
ctrl+d保存定实任务

主要针对一次性的任务

和crond的区别：
crond主要是往复的执行，at主要是一次性的任务

------------------------------------------增加磁盘---------------------------------------
1. 添加磁盘
2. 分区 fdisk /dev/sdb 

3. 格式u啊

例子:
[root@node2 dev]# fdisk /dev/sdb
Welcome to fdisk (util-linux 2.23.2).

Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.

Device does not contain a recognized partition table
Building a new DOS disklabel with disk identifier 0x639399cf.

Command (m for help): m
Command action
   a   toggle a bootable flag
   b   edit bsd disklabel
   c   toggle the dos compatibility flag
   d   delete a partition
   g   create a new empty GPT partition table
   G   create an IRIX (SGI) partition table
   l   list known partition types
   m   print this menu
   n   add a new partition
   o   create a new empty DOS partition table
   p   print the partition table
   q   quit without saving changes
   s   create a new empty Sun disklabel
   t   change a partition's system id
   u   change display/entry units
   v   verify the partition table
   w   write table to disk and exit
   x   extra functionality (experts only)

Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-2097151, default 2048): 
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151): 
Using default value 2097151
Partition 1 of type Linux and of size 1023 MiB is set

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.
[root@node2 dev]# lsblk
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      8:0    0   25G  0 disk 
├─sda1   8:1    0  300M  0 part /boot
├─sda2   8:2    0    2G  0 part [SWAP]
└─sda3   8:3    0 22.7G  0 part /
sdb      8:16   0    1G  0 disk 
└─sdb1   8:17   0 1023M  0 part 
sr0     11:0    1 1024M  0 rom  
[root@node2 dev]# mkfs -t ext4 /dev/sdb1
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 261888 blocks
13094 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done

[root@node2 dev]# lsblk -f
NAME   FSTYPE LABEL UUID                                 MOUNTPOINT
sda                                                      
├─sda1 xfs          bd504ba5-15aa-471c-a631-93f8aaf9512e /boot
├─sda2 swap         46adf388-f4c3-4c3b-ad20-b1302b37510d [SWAP]
└─sda3 xfs          155cb6b1-5542-4f7b-8072-1fee951636b6 /
sdb                                                      
└─sdb1 ext4         1d513b20-e5c1-4167-89c1-3f327652ac86 
sr0                                                      
[root@node2 dev]# pwd
/dev
[root@node2 dev]# mkdir -p /newdisk
[root@node2 dev]# ls /newdisk/
[root@node2 dev]# mount /dev/sdb1 /newdisk/
[root@node2 dev]# lsblk
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      8:0    0   25G  0 disk 
├─sda1   8:1    0  300M  0 part /boot
├─sda2   8:2    0    2G  0 part [SWAP]
└─sda3   8:3    0 22.7G  0 part /
sdb      8:16   0    1G  0 disk 
└─sdb1   8:17   0 1023M  0 part /newdisk
sr0     11:0    1 1024M  0 rom  
[root@node2 dev]# 

存在的问题：
上述命令实现的磁盘的挂载只是临时的，一旦系统启动就会又失去了磁盘和目录的挂载关系，为了实现挂载点的和挂载的永久存在，可以这样：
永久挂载:通过修改/etc.fstab实现挂载
添加完成后执行mount -a 即可生效

df -h 查看磁盘整体使用情况
[root@node2 ~]# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/sda3        23G  9.5G   14G  42% /
devtmpfs        898M     0  898M   0% /dev
tmpfs           912M   84K  912M   1% /dev/shm
tmpfs           912M  9.0M  903M   1% /run
tmpfs           912M     0  912M   0% /sys/fs/cgroup
/dev/sdb1       991M  2.6M  922M   1% /newdisk
/dev/sda1       297M  152M  146M  51% /boot
tmpfs           183M   16K  183M   1% /run/user/42
tmpfs           183M     0  183M   0% /run/user/0


查看指定目录的从盘占用情况
基本的语法
du -h 
查询指定目录的磁盘占用的情况，默认位当前目录
-s 指定目录占用大小汇总
-h 带计量单位
-a 含有所有的文件和目录
--max-dept=1 子目录
-c 列出明细的同时，增加汇总值

练习题
1. 统计/opt文件夹下的文件个数
ls -l /opt/ |grep '^-' | wc -l
2. 统计/opt文件夹下目录的个数
ls -l /opt/ |grep '^d' | wc -l
3. 统计/opt文件夹下的文件个数，包括子文件夹里面的。
ls -lR /opt/ |grep '^-' | wc -l
4. 统计/opt文件夹下的目录个数，包括子文件夹里面的。
ls -lR /opt/ |grep '^d' | wc -l
5. 以树状显示目录的结构


--------------------------网络-------------------------------
一.修改虚拟机器位固定IP
[root@node2 etc]# vim /etc/sysconfig/network-scripts/ifcfg-ens33 

TYPE="Ethernet"
DEFROUTE="yes"
PEERDNS="yes"
PEERROUTES="yes"
IPV4_FAILURE_FATAL="no"
IPV6INIT="yes"
IPV6_AUTOCONF="yes"
IPV6_DEFROUTE="yes"
IPV6_PEERDNS="yes"
IPV6_PEERROUTES="yes"
IPV6_FAILURE_FATAL="no"
IPV6_ADDR_GEN_MODE="stable-privacy"
NAME="ens33"
UUID="9b9ae4c1-0006-4c75-a727-e2c246a8d93b"
DEVICE="ens33"
ONBOOT="yes"
BOOTPROTO="static"
IPADDR="192.168.0.181"
NETMASK="255.255.255.0"
GATEWAY="192.168.0.1"
DNS1="192.168.1.1"


service network restart


------------------------------------------kill指令-------------------------------
kill pid
killall 进程名称：可以是杀死进程和进程相关的所有子进程



---------------------------service控制的服务---------------------------------
可以通过/etc/init.d这个目录里面，centos7之后大多都是使用systemctl



----------------------------chkconfig-------------------------------------------
1.chkconfig 命令可以给符的各个允许级别设置自启动/关闭
2.chkconfig 指令管理的服务在/etc/init.d查看
3. 注意:Centos7.0后，很多服务使用systemctl管理

chkconfig基本语法
1. 查看服务chkconfig --list |grep xxx
2. chkconfig 服务名 --list 
3. chkconfig --level 5 服务名称 on/off

例子：
[root@node2 ~]# chkconfig --list

Note: This output shows SysV services only and does not include native
      systemd services. SysV configuration data might be overridden by native
      systemd configuration.

      If you want to list systemd services use 'systemctl list-unit-files'.
      To see services enabled on particular target use
      'systemctl list-dependencies [target]'.

netconsole     	0:off	1:off	2:off	3:off	4:off	5:off	6:off
network        	0:off	1:off	2:on	3:on	4:on	5:on	6:off
[root@node2 ~]# chkconfig --level 5 netconsole on
[root@node2 ~]# chkconfig --list

Note: This output shows SysV services only and does not include native
      systemd services. SysV configuration data might be overridden by native
      systemd configuration.

      If you want to list systemd services use 'systemctl list-unit-files'.
      To see services enabled on particular target use
      'systemctl list-dependencies [target]'.

netconsole     	0:off	1:off	2:off	3:off	4:off	5:on	6:off
network        	0:off	1:off	2:on	3:on	4:on	5:on	6:off
[root@node2 ~]# chkconfig --level 5 netconsole off
[root@node2 ~]# chkconfig --list

Note: This output shows SysV services only and does not include native
      systemd services. SysV configuration data might be overridden by native
      systemd configuration.

      If you want to list systemd services use 'systemctl list-unit-files'.
      To see services enabled on particular target use
      'systemctl list-dependencies [target]'.

netconsole     	0:off	1:off	2:off	3:off	4:off	5:off	6:off
network        	0:off	1:off	2:on	3:on	4:on	5:on	6:off

------------------------------------------systemctl指令----------------------------------
1.基本语法systemctl [stop|start|restart|status] 服务名称
2. systemctl 指令管理的服务在/usr/lib/systemd/system查看

1. systemctl enable 服务名(设置服务开机启动)
2. systemctl disable 服务名(关闭服务开机启动)

3. systemctl is-enabled 服务名(查看服务是否自启动)

	

------------------------------------防火墙的管理------------------------------------------
在真正的生产环境，往往需要将防火墙打开，但问题来了，如果我们将防火墙打开，那么外部请求数
据包就不能跟服务器监听的断开通讯。这时，需要打开指定的端口，比如80，22，8080等，这个有需
要怎么做呢？

firewall指令
打开端口:firewall-cmd --permanent --add-port=端口/协议
关闭端口:firewall-cmd --permanent --remove-port=端口/协议
执行了以上的端口需要重载才能生效:firewall-cmd --reload
查询端口是否开放:firewall-cmd --query-port=端口/协议

-----------------------------------------动态监控--------------------------------------------------
[root@node2 ~]# top -d 30
top - 16:00:49(当前时间) up  3:12(当前系统允许的时间),  4 users(用户数),  load average: 0.00, 0.02, 0.05(系统负载，一般都是这三个数相加，然后除以三，如果大于70%就得考虑一下系统的负载的问题)
Tasks: 187 total(总任务数),   1 running(运行的个数), 185 sleeping(睡眠的任务个数),   1 stopped(停止的任务个数),   0 zombie(僵死的任务个数，可以考虑将其清除，释放内存和cpu)
%Cpu(s):  0.2 us(用户占用cpu),  0.3 sy(系统占用cpu),  0.0 ni, 99.2 id(空闲的cpu),  0.2 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem :  1867292 total(总内存),   319332 free(空闲),   880532 used(占用),   667428 buff/cache(缓存的大小)
KiB Swap:  2098172 total,  2098172 free,        0 used.   739828 avail Mem(可获取) 


配合的top使用的相关参数
P 以CPU使用率排序，默认就是此项
M 以内存的使用率排序
N 以PID排序
q 退出top


用于的场景
在执行top的情况下输入u，让后会提示要输入用户的名称，此时会搜索到用户的想相关的登录的进程的信息。
此时再次输入k，根据登录进程的信息，输入进程号，此时就可以终止用户的登录。

---------------------------------------------------------服务的监听-------------------------------------
netstat -anp |more
p：代表监听的程序
a:代表所有
n:代表数字名称不解析
------------------------------------------------rpm软件管理----------------------------------------------
rpm 包的其他拆线呢指令
rpm -qa:查询锁安装的所有rpm软件包
rpm -qa |more
rpm -qa |grep x
rpm -qa 软件包名:拆线呢软件包是否安装
例子：rpm -q firefox

rpm -qi 软件包名:查询软件包信息
案例:rpm -qi firefox 
rpm -ql 软件包名:查询软件包中的文件
比如: rpm -ql firefox

rpm -qf查询全路劲名 查询文件所属的软件包
rpm -qf /etc/passwd
rpm -qf /root/install.log


firefox-45.4.0-1.el7.centos.x86_64




---------------------------------------------shell编程--------------------------------------------
Shell变量的定义
1. 变量名称可以由字母，数字和下划线组成，但是不能以数字开头，5A=200是不正确的。
2. 等号两边不能由空格
3. 变量名称一般习惯位大写，这是一个规范，我们遵守即可。

将命令的返回值赋值给变量
1.A=`date`反引号，运行里面的命令，并把结果返回给变量A
2.A=$(date)等价于反引号


shell的多行注释如下:
:<<! 注释内容 !


shell的位置参数
当我们在执行一个shell脚本的时候，如果希望获取到命令行的参数信息，就可以使用到位置参数变量比如:
./myshell.sh 100 200,这个就是一个执行shell的命令行，可以在myshell脚本中获取到参数信息
基本的语法如下：
$n(功能描述:n为数字，$0代表的是命令本身，$1-$9代表第一个到第九个参数，十以上的参数需要用到大括号包含，如${10})
$* (功能描述:这个变量代表命令行中所有的参数，$*把所有的参数堪称一个整体)
$@(功能描述:这个变量代表命令行这所有的参数，不过$@把每个参数区分对待)
$#(功能描述:这个变量代表命令行中所有参数的个数)
-----------------------------------------------------shell预定义变量--------------------------------
预定义变量就是实现已经定义好的变量，可以直接在shell脚本中使用
基本的语法如下：
$$ (功能描述:当前进程的进程好(PID))
$! (功能描述:后台运行的最后一个进程的进程号(PID))
$? (功能描述:最后一次执行的明客的返回状态。如果这个变量的值为0，证明上一个命令的正确执行;如果这个变量的值为非0(具体是哪个数字，
由命令自己来决定)，则证明上一个命令执行不正确了)

---------------------------------------------shell条件判断，多分枝，case语句---------------------------



--------------------------------------------shell循环语句-----------------------------------------------



---------------------------------------------shell读取控制台输入--------------------------------------------
基本语法
read (选项)(参数)
选项:
-p:指定读取值时的提示符
-t:指定读取值时等待的时间(秒)，如果没有在指定的时间内输入。就不会在等待
参数:
变量：指定读取的值的变量名

----------------------------------------shell函数-------------------------------------------
系统函数
1.basename
2.dirname


自定义函数
基本语法：
function functionname(){
action
return int;
}
调用直接写函数名 functonname 值


-----------------------------------------------日志管理服务------------------------------------
/etc/rsyslog.conf这个是配置文件
所有的日志都记录在/var/log这个文件夹层里面。


















































































































